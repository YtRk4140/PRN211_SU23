     /// <summary>
        /// ket noi voi database
        /// </summary>
        /// <returns></returns>
        public static SqlConnection GetConnection()
        {
            var  config= new ConfigurationBuilder().AddJsonFile("test.json").Build();
            string connect = config.GetConnectionString("Test");
            return new SqlConnection(connect);
        }
        /// <summary>
        /// dung de tra ve du lieu dung cau lenh select
        /// </summary>
        /// <param name="sql"></param>
        /// <param name="parameters"></param>
        /// <returns></returns>
        public static DataTable GetDataBySql(string sql,params SqlParameter[] parameters)
        {
            SqlCommand command = new SqlCommand(sql, GetConnection());
            if (parameters != null)
                command.Parameters.AddRange(parameters);
            //   de truy suat dy lieu
            //SqlDataAdapter là một lớp đại diện cho một tập hợp các lệnh SQL và kết nối cơ sở dữ liệu. Nó được sử dụng để điền DataSet hoặc DataTable và cập nhật nguồn dữ liệu.
            SqlDataAdapter adapter = new SqlDataAdapter();
            adapter.SelectCommand = command;
            DataTable dt = new DataTable();
            adapter.Fill(dt);
            return dt;
        }

        /// <summary>
        ///  thuc hien cau lenh insert , update, delete trong sql 
        /// </summary>
        /// <param name="sql"></param>
        /// <param name="parameters"></param>
        /// <returns></returns>
        public static int ExecuteBySql(string sql , params SqlParameter[] parameters)
        {
            SqlCommand command = new SqlCommand(sql, GetConnection());
            if (parameters != null )
                command.Parameters.AddRange(parameters);
            command.Connection.Open();
            // thuc hien cau truy van
            int count= command.ExecuteNonQuery();
            command.Connection.Close();
            return count;
        }



"ConnectionStrings": {
    "Test": "server=21AK22-COM; database=PE_PRN211_23SprB1;user=sa;password=123;Integrated Security=true;TrustServerCertificate=Yes"
  }

"ConnectionStrings": {
    "Test": "server=(local); database=;user=sa;password=12345;Integrated Security=true;TrustServerCertificate=Yes"
  }


dotnet ef dbcontext scaffold "server=DESKTOP-2UH4606\SQLEXPRESS; database=PE_Fall21B5;user=sa;password=12345;Integrated Security=true;TrustServerCertificate=Yes" Microsoft.EntityFrameworkCore.SqlServer --output-dir Models

dotnet ef dbcontext scaffold "server=(local); database= PetShop2023DB;user=sa;password=12345;Integrated Security=true;TrustServerCertificate=Yes" Microsoft.EntityFrameworkCore.SqlServer --output-dir Models
  
protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {

                optionsBuilder.UseSqlServer(GetConnectionString());

            }
        }
        private string GetConnectionString()
        {
            IConfiguration config = new ConfigurationBuilder()
                 .SetBasePath(Directory.GetCurrentDirectory())
                        .AddJsonFile("appsettings.json", true, true)
                        .Build();
            var strConn = config["ConnectionStrings:DefaultConnectionStringDB"];

            return strConn;
        }

var config = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();             optionsBuilder.UseSqlServer(config.GetConnectionString("ApDBConStr"));

var config = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
                optionsBuilder.UseSqlServer(config.GetConnectionString("Test"));

 app.MapControllerRoute(
                 name: "default",
                 pattern: "{Controller=Employee}/{Action=List}"
             );

// xoa
dotnet tool uninstall --global dotnet-ef
// cai moi
dotnet tool install --global dotnet-ef
// xem phien ban hien tai
dotnet tool list --global

vào file Program
// Add services to the container.
builder.Services.AddControllersWithViews();

--> url pattern đề  bắt
app.MapControllerRoute(
              name: "default",
              pattern: "{Controller=List}/{Action=Contract}"
    );




    builder.Services.AddSession(
                x => x.IdleTimeout = TimeSpan.FromHours(1)
                ) ;
app.UseSession();
